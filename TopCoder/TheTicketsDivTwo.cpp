#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


class TheTicketsDivTwo {
public:
	double dp[ 11 ][ 11 ][ 11 ][ 11 ];
	bool vis[ 11 ][ 11 ][ 11 ][ 11 ];

	double solve( int bef, int aft, int k, int rem )
	{
		if ( !k || !rem )
			return ( bef == 0 );

		if ( vis[ bef ][ aft ][ k ][ rem ] )
			return dp[ bef ][ aft ][ k ][ rem ];

		double &ans = dp[ bef ][ aft ][ k ][ rem ];
		ans = 0;
		vis[ bef ][ aft ][ k ][ rem ] = true;

		if ( !bef )
		{
			ans += 1.0/6.0 ;
			ans += ( 3.0 * solve ( rem, 0, k-1, rem )) / 6.0 ;
		}
		else
		{
			ans += ( 3.0 * solve ( bef - 1, aft + 1 , k-1, rem )) / 6.0 ;
			ans += ( 2.0 * solve ( bef - 1, aft, k-1, rem -1 ) ) / 6.0 ;
		}

		return ans;
	}
	double find(int n, int m, int k) 
	{
		memset ( vis, 0, sizeof( vis ) );

		return solve ( m-1, n-m, k, n-1 );
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	TheTicketsDivTwo *obj;
	double answer;
	obj = new TheTicketsDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 1;
	p2 = 1;
	p3 = 0.16666666666666666;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 2;
	p3 = 0.5833333333333334;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 7;
	p1 = 7;
	p2 = 4;
	p3 = 0.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 2;
	p2 = 10;
	p3 = 0.25264033564814814;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
