#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TxMsg {
public:
	string getMessage(string original) {
		bool check;
		int n=0;
		string ans ="";
		for ( int i=0 ; i<original.size() ; i++ )
		{
			n = original.find(' ',i );
			if ( n == -1 )
				n = original.size();
			check = true;
			for ( int j=i ; j<n ; j++ )
			{
				if ( original[j] != 'a' && original[j] != 'e' && original[j] != 'i' && original[j] != 'o' && original[j] != 'u' )
				{
					check = false;
					break;
				}
			}
			if ( check )
				ans += original.substr( i, n-i );
			else
			{
				for ( int j=i ; j<n ; j++ )
				{
					if ( original[j] != 'a' && original[j] != 'e' && original[j] != 'i' && original[j] != 'o' && original[j] != 'u' )
					{
						if ( j==0 || original[j-1] == 'a' || original[j-1] == 'e' || original[j-1] == 'i' || original[j-1] == 'o' || original[j-1] == 'u' || original[j-1] == ' ' )
							ans+=original[j];
					}
				}
			}
			if ( n!=original.size() )
				ans += ' ';
			i=n;
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	TxMsg *obj;
	string answer;
	obj = new TxMsg();
	clock_t startTime = clock();
	answer = obj->getMessage(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "text message";
	p1 = "tx msg";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ps i love u";
	p1 = "p i lv u";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "please please me";
	p1 = "ps ps m";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "back to the ussr";
	p1 = "bc t t s";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "aeiou bcdfghjklmnpqrstvwxyz";
	p1 = "aeiou b";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
