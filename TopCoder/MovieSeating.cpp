#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


long long nPr(int n,int r)
{
	long long anss=1;
	r = n-r;
	for ( int i=n ; i>r ; i-- )
	{
			anss*=i;
	}
	return anss;
}
class MovieSeating {
public:
	long long getSeatings(int numFriends, vector <string> hall) {
		int n;
		long long ans = 0;
		if ( numFriends > 1 )
		{
			for ( int i=0 ; i<hall.size() ; i++ )
			{
				n=0;
				for ( int j=0 ; j<hall[i].size() ; j++ )
					if ( hall[i][j] == '.' )
						n++;
				if ( n >= numFriends )
					ans += nPr ( n,numFriends );
			}
		}
		for ( int i=0 ; i<hall[0].size() ; i++ )
		{
			n=0;
			for ( int j=0 ; j<hall.size() ; j++ )
				if ( hall[j][i] == '.' )
					n++;
			if ( n >= numFriends )
				ans += nPr ( n,numFriends );
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MovieSeating *obj;
	long long answer;
	obj = new MovieSeating();
	clock_t startTime = clock();
	answer = obj->getSeatings(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	string t1[] = {".#..",".##.","...."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 34ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	string t1[] = {"..#",".##","..."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 16ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	string t1[] = {"..####..",".###.##.",".######.","#.#.#.#."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 8;
	string t1[] = {"........"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 40320ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
