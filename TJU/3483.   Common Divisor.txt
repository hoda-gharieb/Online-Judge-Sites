#include<iostream>
#include<cmath>
#include<vector>
#include<cstring>
#include<stdio.h>
#include<set>
#include<map>
#include<string>
#include<algorithm>
#include<limits.h>
#include<math.h>
#include<iomanip>
#include<queue>
#include<sstream>
#include<cstdlib>
using namespace std;

#define Forp( i,k,l ) for ( int i=k ; i<l ; i++ )
#define Form( i,l ) for ( int i=l-1 ; i>=0 ; i-- )
#define vs vector< string >
#define vi vector< int >
#define vll vector< long long >
#define msv map< string, vs >
#define mst( i,j ) memset( i,j,sizeof(i))
typedef long long ll;
const int oo = (int)1e9;
const int Mod = 1000000007;

ll gcd(ll a,ll b)
{
	return ( b==0 ? a : gcd(b,a%b) );
}
vector<int> primeList;
bool prime[50005];
void doPrime(long long num)
{
	memset(prime,true,sizeof(prime));
	prime[0]=prime[1]=false;
	long long i=4;
	while ( i<=num )
	{
		prime[i]=false;
		i+=2;
	}
	primeList.push_back(2);
	for ( i=3 ; i<=num ; i+=2 )
	{
		if ( prime[i] )
		{
			for ( long long  j=i*i ; j<=num ; j+=i )
				prime[j]=false;
			primeList.push_back(i);
		}
	}
}
ll numDiv ( ll n )
{
	ll index=0,ans=1,power;
	while ( n!=1 && index<primeList.size() && (primeList[index]*primeList[index]<=n) )
	{
		power=0;
		while ( n%primeList[index]==0 )
		{
			n/=primeList[index];
			power++;
		}
		ans*=(++power);
		index++;
	}
	if ( n!=1 )
		ans*=2;
	return ans;
}

int main()
{
	//freopen ( "input.in" , "r" ,stdin );
	doPrime( 50000 );
	ll a, b, ans;
	int t;
	scanf( "%d", &t );
	while ( t-- )
	{
		cin>>a>>b;
		ans = 1;
		if ( a > b )
			swap( a,b );
		ans = gcd( b,a );
		if ( ans != 1 )
			ans = numDiv( ans );
		else
			ans = 1;
		cout<<ans<<endl;
	}
	
}