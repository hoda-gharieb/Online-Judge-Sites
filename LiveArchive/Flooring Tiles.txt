#include<iostream>
#include<cmath>
#include<vector>
#include<cstring>
#include<stdio.h>
#include<set>
#include<map>
#include<string>
#include<algorithm>
#include<limits.h>
#include<math.h>
#include<iomanip>
#include<queue>
#include<sstream>
#include<bitset>
#include<cmath>
using namespace std;

#define Forp( i,k,l ) for ( int i=k ; i<l ; i++ )
#define Form( i,k,l ) for ( int i=k-1 ; i>=l ; i-- )
#define vs vector< string >
#define vi vector< int >
#define vll vector< long long >
#define msv map< string, vs >
#define mst( i,j ) memset( i,j,sizeof(i))
typedef long long ll;
typedef unsigned long long ull;
const int oo = (int)1e9 ;

const int primes[] = { 2, 3, 5, 7, 11, 13, 17 };
const int n = 7;
const ll inf = 1000000000000000000;
ll dp[ 7 ][ 151 ];

ll solve( int index, int numDiv )
{
	if ( index == n )
		return numDiv == 1 ? 1 : inf ;

	ll &ans = dp[ index ][ numDiv ];
	if ( ans != -1 )
		return ans;

	ans = inf;
	Forp( i, 0, numDiv )
	{
		if ( numDiv % ( i + 1 ) == 0 )
		{
			ll newNum = solve( index + 1, numDiv / ( i + 1 ) ) * powl( primes[ index ], i );

			if ( newNum > 0 )
				ans = min ( ans, newNum );
		}
	}
	return ans;
}

int main()
{
	//freopen ( "input.in" , "r" ,stdin );
	int N;
	mst( dp, -1 );
	
	while ( cin>>N && N )
		cout<< min( solve( 0, N+N ), solve( 0, N+N - 1 ) )<< endl;
}