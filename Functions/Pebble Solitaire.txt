#include<iostream>
#include<cmath>
#include<vector>
#include<cstring>
#include<stdio.h>
#include<set>
#include<map>
#include<string>
#include<algorithm>
#include<limits.h>
#include<math.h>
#include<iomanip>
#include<queue>
#include<sstream>
using namespace std;

#define Forp( i,k,l ) for ( int i=k ; i<l ; i++ )
#define Form( i,k,l ) for ( int i=k-1 ; i>=l ; i-- )
#define vs vector< string >
#define vi vector< int >
#define vll vector< long long >
#define msv map< string, vs >
#define mst( i,j ) memset( i,j,sizeof(i))
typedef long long ll;
const int oo = (int)1e9;

int setBit ( int n, int i, int value = 1 ) 
{
	return ( value ) ? ( n | ( 1<<i) ) : ( n &~ ( 1<<i ) ) ;
}
int getBit ( int n, int i )
{
	return (( n >> i ) & 1) == 1;
}
int ones ( int n )
{
	int ans = 0;
	while ( n )
	{
		if ( n%2 )
			ans++;
		n/=2;
	}
	return ans;
}

int dp[ 1<<12 ];

int solve( int mask )
{
	if ( dp[ mask ] != -1 )
		return dp[ mask ];

	int &ans = dp[ mask ];
	ans = 0;

	Forp ( i,0,10 )
	{
		if ( getBit( mask,i ) && getBit( mask, i+1 ) && !getBit( mask, i+2 ) )
		{
			int xMask = mask;

			xMask = setBit( xMask, i, 0 );
			xMask = setBit( xMask, i+1, 0 );
			xMask = setBit( xMask, i+2, 1 );

			ans = max( ans, 1 + solve( xMask ) );
		}

		if ( !getBit( mask,i ) && getBit( mask, i+1 ) && getBit( mask, i+2 ) )
		{
			int xMask = mask;

			xMask = setBit( xMask, i, 1 );
			xMask = setBit( xMask, i+1, 0 );
			xMask = setBit( xMask, i+2, 0 );

			ans = max( ans, 1 + solve( xMask ) );
		}
	}
	return ans;
}

int main()
{
	//freopen ( "input.in" , "r" ,stdin );
	int t;
	string line;
	cin>>t;
	while ( t-- )
	{
		cin>>line;
		int mask = 0, count = 0;

		Forp( i,0,line.length() )
		{
			if ( line[ i ] == 'o' )
			{
				mask = setBit( mask, i, 1 );
				count++;
			}
		}

		mst( dp,-1 );
		cout<< count - solve( mask ) << endl;
	}
}