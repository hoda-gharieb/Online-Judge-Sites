//============================ MaxFlow Code ======================//
const int inf = 1 << 29;

struct node
{
	int to;
	int nSides;
	int flow;
	node(){}
	node( int t, int n, int f ) : to( t ), nSides( n ), flow( f ) {}
};

vector< vector < node > > adjList;
vb vis;

void addEdge( int from, int to, int flow )
{
	node a = node( from, adjList[ from ].size(), 0 );
	node b = node( to, adjList[ to ].size(), flow );
	adjList[ to ].push_back( a );
	adjList[ from ].push_back( b );
}

int getPath( int src, int sink, int flow )
{
	if ( vis[ src ] || !flow )
		return 0;
	vis[ src ] = true;
	if ( src == sink )
		return flow;
	Forp( i, 0, adjList[ src ].size() )
	{
		int j = adjList[ src ][ i ].to;
		int path = getPath( j, sink, min( flow, adjList[ src ][ i ].flow ) );
		if ( path > 0 )
		{
			int k = adjList[ src ][ i ].nSides;
			adjList[ src ][ i ].flow -= path;
			adjList[ j ][ k ].flow += path;
			return path;
		}
	}
	return 0;
}

int maxFlow( int src, int sink )
{
	if ( src == sink )
		return inf;
	int flow, total = 0;

	while ( ( flow = getPath( src, sink, inf) ) )
	{
		vis = vb( adjList.size(), false );
		total += flow;
	}
	return total;
}

void init( int n)
{
	adjList.clear();
	adjList.resize( n );
	vis.clear();
	vis.resize( n, false );
}
//===========================================================================//