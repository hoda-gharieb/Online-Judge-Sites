#include<iostream>
#include<cmath>
#include<vector>
#include<cstring>
#include<stdio.h>
#include<set>
#include<map>
#include<string>
#include<algorithm>
#include<limits.h>
#include<math.h>
#include<iomanip>
#include<queue>
#include<sstream>
#include<bitset>
#include<cmath>
using namespace std;

#define Forp( i,k,l ) for ( int i=k ; i<l ; i++ )
#define Form( i,k,l ) for ( int i=k-1 ; i>=l ; i-- )
#define vs vector< string >
#define vb vector< bool >
#define vi vector< int >
#define vll vector< long long >
#define msv map< string, vs >
#define mst( i,j ) memset( i,j,sizeof(i))
typedef long long ll;
typedef unsigned long long ull;
const int oo = (int)1e8 ;

int arr[ 102 ][ 102 ][ 2 ];
int main()
{
	//freopen ( "input.in" , "r" ,stdin );
	int n, r, x, y, q, t=1 ;
	while ( cin>>n>>r )
	{
		Forp( i, 0, n )
		{
			Forp( j, 0, n )
			{				
				arr[ i ][ j ][ 0 ] = arr[ i ][ j ][ 1 ] = oo;
				if( i==j )
					arr[ i ][ j ][ 0 ] = 0;
			}
		}
		Forp( i, 0, r )
		{
			scanf( "%d %d %d", &x, &y, &q );
			arr[ x ][ y ][ 0 ] = arr[ y ][ x ][ 0 ] = q;
		}
		Forp( i, 0, 2 )
		{
			Forp( j, 0, n )
			{
				Forp( k, 0, n )
				{
					Forp( l, 0, n )
					{
						if ( arr[ k ][ l ][ 0 ] > arr[ k ][ j ][ 0 ] + arr[ j ][ l ][ 0 ] )
						{
							arr[ k ][ l ][ 1 ] = arr[ k ][ l ][ 0 ];
							arr[ k ][ l ][ 0 ] = arr[ k ][ j ][ 0 ] + arr[ j ][ l ][ 0 ];
						}
						else if ( arr[ k ][ l ][ 0 ] < arr[ k ][ j ][ 0 ] + arr[ j ][ l ][ 0 ] )
							arr[ k ][ l ][ 1 ] = min ( arr[ k ][ l ][ 1 ], arr[ k ][ j ][ 0 ] + arr[ j ][ l ][ 0 ] );

							if ( arr[ k ][ l ][ 0 ] < arr[ k ][ j ][ 1 ] + arr[ j ][ l ][ 0 ] )
								arr[ k ][ l ][ 1 ] = min ( arr[ k ][ l ][ 1 ], arr[ k ][ j ][ 1 ] + arr[ j ][ l ][ 0 ] );

							if ( arr[ k ][ l ][ 0 ] < arr[ k ][ j ][ 0 ] + arr[ j ][ l ][ 1 ] )
								arr[ k ][ l ][ 1 ] = min ( arr[ k ][ l ][ 1 ], arr[ k ][ j ][ 0 ] + arr[ j ][ l ][ 1 ] );
					}
				}
			}
		}

		scanf( "%d", &q );
		printf( "Set #%d\n", t++ ); 
		while( q-- )
		{
			scanf( "%d %d", &x, &y );
			if ( arr[ x ][ y ][ 1 ] < oo )
				printf( "%d\n", arr[ x ][ y ][ 1 ] );
			else
				puts("?");
		}

	}
}