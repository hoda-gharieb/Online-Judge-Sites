#include<iostream>
#include<queue>
#include<cstring>
#include<string>
using namespace std;

int xArr[]={1,1,2,2,-1,-1,-2,-2};
int yArr[]={2,-2,1,-1,2,-2,1,-1};

bool visited[8][8]={false};

struct Move
{
	int x;
	int y;
	int mov;
};

bool check ( int x, int y )
{
	return ( x >= 0 && x < 8 && y < 8 && y >= 0 );
}
int main()
{
	//freopen("input.in", "r", stdin);
	string from,togo;
	Move start,current,temp;
	queue < Move > bfs;
	int fx , fy , tx , ty ;
	while ( cin>>from>>togo )
	{
		memset(visited,false,sizeof(visited));
		if ( ! bfs.empty() )
		{
			while ( !bfs.empty() )
				bfs.pop();
		}
		fx=from[0]-'a';
		fy=from[1]-'1';
		tx=togo[0]-'a';
		ty=togo[1]-'1';
		start.x=fx;
		start.y=fy;
		start.mov=0;
		bfs.push(start);
		visited[fx][fy]=true;
		while ( ! bfs.empty() )
		{
			current=bfs.front();
			if ( current.x == tx && current.y == ty )
			{
				cout << "To get from " << from << " to " << togo << " takes " << current.mov << " knight moves." << endl;
				break;
			}
			bfs.pop();
			for ( int i=0 ; i < 8 ; i++ )
			{
				if ( check( current.x + xArr[i] , current.y + yArr[i] ) && !visited[ current.x + xArr[i] ][ current.y + yArr[i] ])
				{
					temp.x = current.x + xArr[i];
					temp.y = current.y + yArr[i];
					temp.mov = current.mov + 1;
					bfs.push(temp);
					visited[ current.x + xArr[i] ][ current.y + yArr[i] ] = true;
				}
			}
		}

	}
}