#include<iostream>
#include<cmath>
#include<vector>
#include<cstring>
#include<stdio.h>
#include<set>
#include<string>
#include<algorithm>
#include<limits.h>
#include<math.h>
#include<iomanip>
#include<map>
#include<queue>
using namespace std;

#define Forp( i,l ) for ( int i=0 ; i<l ; i++ )
#define Form( i,l ) for ( int i=l-1 ; i>=0 ; i-- )
#define vs vector< string >
#define vi vector< int >
#define vll vector< long long >
#define msv map< string, vs >
typedef long long ll;
const int oo = (int)1e9;

msv M;
msv::iterator it;
map< string, int > visited;

int bfs( string start, string end )
{
	queue< string > Q;
	Q.push( start );
	visited[ start ] = 0;
	while ( ! Q.empty() )
	{
		string top = Q.front();
		Q.pop();
		if ( top == end )
			return visited[ top ];
		Forp( i, M[ top ].size() )
		{
			if ( ! visited.count( M[ top ][ i ]) )
			{
				visited[ M[ top ][ i ]] = visited[ top ] + 1;
				Q.push ( M[ top ][ i ] );
			}
		}
	}
}

int main()
{
	//freopen ( "input.in", "r", stdin );
	int n;
	cin>>n;
	while ( n-- )
	{
		M.clear();
		string word, word2;
		while ( cin>>word && word != "*" )
		{
			M[ word ];
			for ( it = M.begin() ; it != M.end() ; it++ )
			{
				word2 = it->first;
				if ( word2.size() == word.size() )
				{
					int k = 0;
					Forp( i,word.size() )
						if ( word[ i ] != word2[ i ] )
							k++;
					if ( k==1 )
					{
						M[ word ].push_back( word2 );
						M[ word2 ].push_back( word );
					}
				}
			}
		}
		cin.ignore();
		while ( getline( cin, word ) && word != "" )
		{
			visited.clear();
			int k = word.find(" " );
			word2 = word.substr( k+1, word.size() );
			word = word.substr( 0,k );
			cout << word << " " << word2 << " " << bfs( word, word2 ) << endl;
		}
		if ( n )
			cout<< endl;
	}
}

