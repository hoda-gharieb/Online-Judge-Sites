#include<iostream>
#include<cmath>
#include<vector>
#include<cstring>
#include<stdio.h>
#include<set>
#include<string>
#include<algorithm>
#include<limits.h>
#include<math.h>
#include<iomanip>
#include<map>
#include<queue>
using namespace std;
#define Forp( i,l ) for ( int i=0 ; i<l ; i++ )


string word1, word2;
int dp[ 85 ][ 85 ], ind, shifti;

int solve( int w1, int w2 )
{
	if ( w1 == word1.size() )
		return word2.size() - w2;

	if ( w2 == word2.size() )
		return word1.size() - w1;

	int &ans = dp[ w1 ][ w2 ];

	if ( ans != -1 )
		return ans;

	if ( word1[ w1 ] == word2[ w2 ] )
		return ans = solve( w1+1, w2+1 );

	int a = 1 + solve( w1, w2+1 );
	int b = 1 + solve( w1+1 , w2 );
	int c = 1 + solve( w1+1 , w2+1 );	

	return ans = min( a, min( b, c ) );
}

void printAns( int w1, int w2 )
{
	if ( w1 == word1.size() )
	{
		int k = word2.size() - w2 ;
		Forp( i,k )
		{
			cout<<ind<< " Insert " << i+1+w1+shifti << "," << word2[ w2+i ] << endl;
			ind++;
		}
		shifti += k;
		return;
	}

	if ( w2 == word2.size() )
	{
		int k = word1.size() - w1;
		Forp( i,k )
		{
			cout<< ind << " Delete " << i+1+w1+shifti << endl;
			ind++;
			shifti --;
		}
		return;
	}

	if ( word1[ w1 ] == word2[ w2 ] )
	{
		printAns( w1+1, w2+1 );
		return ;
	}

	int a = 1 + dp[ w1 ][ w2+1 ];
	int b = 1 + dp[ w1+1 ][ w2 ];
	int c = 1 + dp[ w1+1 ][ w2+1 ];

	int ans = dp[ w1 ][ w2 ];

	if ( ans == a )
	{
		cout<< ind << " Insert " << 1+w1+shifti << "," << word2[ w2 ] << endl;
		ind++;
		shifti++;
		printAns( w1, w2+1 );
	}
	else if ( ans == b )
	{
		cout<< ind << " Delete " << 1+w1+shifti << endl;
		ind++;
		shifti--;
		printAns( w1+1, w2 );
	}
	else
	{
		cout<<ind<< " Replace " <<1+w1+shifti << "," <<word2[ w2 ]<< endl;
		ind++;
		printAns( w1+1, w2+1 );
	}
}

int main()
{
	//freopen ( "input.in", "r", stdin );
	int s = 0;
	while ( getline( cin, word1 ) && getline( cin, word2 ) )
	{
		if ( s )
			cout<<endl;

		memset( dp, -1, sizeof( dp ));
		cout<< solve( 0,0 ) <<endl;
		ind = 1; shifti = 0;
		printAns( 0,0 );

		s = 1;
	}
}

