#include<iostream>
#include<cmath>
#include<vector>
#include<cstring>
#include<stdio.h>
#include<set>
#include<map>
#include<string>
#include<algorithm>
#include<limits.h>
#include<math.h>
#include<iomanip>
#include<queue>
#include<sstream>
#include<bitset>
#include<cmath>
#include<complex>
#include<vector>
using namespace std;

typedef complex <double> point;
#define X real()
#define Y imag()
#define length(a) hypot((a).X,(a).Y)
#define vec(a,b) ((b)-(a))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define EPS 1.0e-10

bool intersectLine(const point &a, const point &b, const point &p, const point &q, point & ret)
{
	double d1 = cross(p - a, b - a);
	double d2 = cross(q - a, b - a);
	ret = (d1 * q - d2 * p) / (d1 - d2);
	return fabs(d1-d2) > EPS;
}
void perBisector(point &a,point &b,point &c,point &d)
{
	point mid = (a+0.5*(b-a));
	double x = vec(a,b).X;
	double y = vec(a,b).Y;
	point p1(-1*y,x);
	point p2(y,-1*x);
	p1=p1+mid;
	p2=p2+mid;
	c=p1;
	d=p2;
}
int main()
{
	//freopen ( "input.in" , "r" ,stdin );
	int t;
	double x, y, z, a, b, c, s;
	cin>>t;
	while ( t-- )
	{
		cin>>x>>y>>z;
		a = x + y;
		b = y + z;
		c = x + z;
		s = ( a + b + c ) / 2.0;
		s = s * ( s - a ) * ( s - b ) * ( s - c );
		s = sqrt( s );

		double angle1 = acos( ( a*a + b*b - c*c ) / ( 2*a*b ) );
		double angle2 = acos( ( a*a + c*c - b*b ) / ( 2*a*c ) );
		double angle3 = acos( ( c*c + b*b - a*a ) / ( 2*c*b ) );

		double a1 = 0.5 * angle1 * y * y;
		double a2 = 0.5 * angle2 * x * x;
		double a3 = 0.5 * angle3 * z * z;

		s-= ( a1 + a2 + a3 );
		cout<<setprecision( 6 )<< fixed << s <<endl;
	}
}